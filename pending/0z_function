Notar que hay una biyección entre las posiciones del string, los prefijos y los sufijos ( isomorfismos, o sea se ve lo mismo desde distintos puntos de vista)

La z-function de un string nos permite saber para cada sufijo del string cual es la longitud del mayor prefijo común entre el sufijo y el string. cada sufijo del string está determinado por el índice donde comienza.

Entonces lo primero que podemos implementar es la fuerza bruta, pero esta trae consigo que para strings como "aaaaaaaaaaaaa", el algoritmo tiene que hacer theta(n²) comparaciones.

Ahora una optimización a esto, es notar que si recorremos desde la posición i hasta la j, en la iteración i-ésima es porque el mayor prefijo común al sufijo va de [0, j-i-1], cuando estemos en la iteración (i+1)-ésima notar que el prefijo que va de [i+1, j-1] es el mismo que el de [1, j-i-1], por tanto en el segundo for podemos saltarnos al menos 
min( z[(i+1)-i], j-(i+1)) iteraciones del segundo for, si ese número es igual a j-(i+1) entonces tenemos que extender nuestro horizonte, y al acabar esta iteración se actualizaría el j, en caso contrario no hay necesidad de seguir buscando, porque lo que coincidió cuando se hizo el análisis en z[(i+1)-i] es menor que la longitud del tramo que va de [i+1, j-1].    
 
               (i+1)
------------------------------
0             i          j
              15         26
abbaiussdbay  abbaiussdbax
          10

1 - se recorre desde la i hasta la j, se guarda el j, y el i. Coincidió en (j-i) posiciones. Por tanto se va a repetir en [0, j-i-1].
 
2 - en la (i+1) como el j > (i+1), el string que va desde [1, j-i-1] es el mismo que el de [i+1, j-1], ahora si cuando calculamos z[1] avanzamos hasta una posición menor que [j-i-1] cuando lo hagamos desde [i+1, j-i-1] pasará lo mismo porque hay la misma secuencia de carácteres, por tanto lo podemos reutilizar, el caso que nos quedaría es cuando lo que se avanza es la longitud del string, en este caso necesariamente habría que extender el valor de j. Por tanto esta optimización reduce la complejidad del algoritmo de cuadrático a linear, porque o el trabajo que se hace es constante utilizando la información pre-calculada o hay que extender el j algunas veces más pero el j solamente puede ser extendido hasta el final del string.   

Dado un string como : "aaaaaaaaaar",

z[0] = not defined
z[1] = 9, l = 1, r = 10, en esta iteración se hace theta(n) comparaciones.
z[2] = 8, l = 1, r = 10, cte
z[3] = 7, ...          , cte
....

Por lo que el algoritmo overall hace una cantidad linear de operaciones respecto a la entrada, pero no es que haga por cada elemento de la entrada un trabajo constante.

Ahora hay que ver aplicaciones de la Z-function.

1 - Para hacer pattern-matching sería:

T = P+T, hacerle z-function a T, y las posiciones donde z[i] >= len(P) se pueden considerar como que matcheó.

2 - Como saber cuántos substrings diferentes posee un string ?

Sean los sufijos ordenados de menor a mayor por su longitud S1, S2, ...., Sn donde Sn sería S, entonces para el sufijo Si necesito saber cual es la longitud del mayor prefijo común entre Si y Sj donde j va desde 1 hasta i-1, digamos que esa longitud es t, entonces puedo sumar un total de i-t substrings diferentes.

Ahora la question es como obtener esa información en O(n^2), la idea es hacer Z-function a el string Si + # + S_{i-1}

porque los sufijos de S_{i-1} son S_{i-1}, S_{i-2}, ..., S_1, entonces la posición que de el mayor valor sería el mayor prefijo común entre S_{i} y uno de los restantes S_j. 

La complejidad de este algoritmo sería cuadrática porque hay que realizar n veces z-function a un string obtenido al concatenar dos sufijos cuya longitud resultante es a lo más 2n-1.

3 - Hallar el menor substring t de un string x tal que x puede ser escrito como >= 1 concatenaciones  de t.

Notar que si hay un prefijo de longtiud l que cumple esa condición, entonces cuando la z-function llega a la posición l, va a avanzar hasta el final, pero puede suceder que se avanze hasta el final sin ser el prefijo que buscamos, por tanto se tiene que cumplir para i entre 1 y m que z[i*l] = len(S) - i*l, else return string completo. 

1*l, 2*l, ..., m*l, len(S)

Hacer un algoritmo que convierta la z-function en la prefix-function.

Por ejemplo:

    aabbbaaabbb
i : 01234567890
z : 01000251000
p': 01000122345

La cosa es que cada vez que nos encontremos una posición donde z[i] = t > 0, sería poner a partir de ahí 1, 2, 3, ..., t. Pero puede que esa posición haya sido rellenada por esto mismo anteriormente, pués mantenemos el máximo valor. Entonces habría 0 hasta que se encuentra un i tal que z[i] > 0.
